// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  name               String?
  password           String
  mustChangePassword Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  createdReceipts Receipt[]
}

model Driver {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services Service[]
}

model Route {
  id          Int      @id @default(autoincrement())
  origin      String
  destination String
  tollCost    Decimal  @default(0) @db.Decimal(12, 2)
  mileage     Decimal? @db.Decimal(10, 1)

  services Service[]

  @@unique([origin, destination], name: "origin_destination_unique")
}

model Receipt {
  id           Int      @id @default(autoincrement())
  date         DateTime
  number       String
  clientName   String
  companyName  String?
  address      String
  cpfCnpj      String   @db.VarChar(20)
  requester    String
  passengers   String? // Alterado para String? para corresponder a 'text'
  observations String? // Alterado para String? para corresponder a 'text'
  language     String   @db.VarChar(5)
  grandTotal   Decimal  @default(0) @db.Decimal(12, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdById  Int
  createdBy    User     @relation(fields: [createdById], references: [id])

  services Service[]
}

model Service {
  id          Int      @id @default(autoincrement())
  serviceDate DateTime
  transfer    Decimal  @default(0) @db.Decimal(12, 2)
  extras      Decimal  @default(0) @db.Decimal(12, 2)
  total       Decimal  @default(0) @db.Decimal(12, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  routeId   Int
  route     Route   @relation(fields: [routeId], references: [id])
  driverId  Int
  driver    Driver  @relation(fields: [driverId], references: [id])

  // --- LINHAS CORRETAMENTE EDITADAS ---
  receiptId Int?
  receipt   Receipt? @relation(fields: [receiptId], references: [id], onDelete: Cascade)

  expense Expense?
}

model Expense {
  id                Int      @id @default(autoincrement())
  estacionamento    Decimal? @default(0) @db.Decimal(12, 2)
  estacionamentoReal Decimal? @default(0) @db.Decimal(12, 2)
  taxaCartao        Decimal? @default(0) @db.Decimal(12, 2)
  despesa           Decimal? @default(0) @db.Decimal(12, 2)
  quilometragem     Decimal? @db.Decimal(10, 1)
  pedagio           Decimal? @default(0) @db.Decimal(12, 2)
  consumoMedio      Decimal? @db.Decimal(10, 3)
  valorCombustivel  Decimal? @db.Decimal(12, 2)
  impostoPercentual Decimal? @default(0) @db.Decimal(5, 2)
  impostoValor      Decimal? @default(0) @db.Decimal(12, 2)
  notaFiscal        String?
  despesas          String? // Corresponde a 'text'
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  serviceId Int     @unique
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}