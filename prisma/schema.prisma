// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  name               String?
  password           String
  mustChangePassword Boolean? @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  createdReceipts    Receipt[]
}

model Driver {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  services  Service[]
}

model Route {
  id            Int     @id @default(autoincrement())
  origin        String
  destination   String
  tollCost      Float?
  mileage       Float?
  services      Service[]
  @@unique([origin, destination], name: "origin_destination_unique")
}

model Receipt {
  id           Int      @id @default(autoincrement())
  date         DateTime
  number       String
  clientName   String
  companyName  String?
  address      String
  cpfCnpj      String
  requester    String
  passengers   String
  observations String?
  language     String
  grandTotal   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  services    Service[]
}

model Service {
  id          Int      @id @default(autoincrement())
  serviceDate DateTime
  transfer    Float
  extras      Float
  total       Float
  routeId     Int
  route       Route    @relation(fields: [routeId], references: [id])
  receiptId   Int
  receipt     Receipt  @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  driverId    Int
  driver      Driver   @relation(fields: [driverId], references: [id])
  expense     Expense?
}

model Expense {
  id                Int     @id @default(autoincrement())
  estacionamento    Float?
  estacionamentoReal Float?
  taxaCartao        Float?
  despesa           Float?
  quilometragem     Float?
  pedagio           Float?
  litrosAbastecidos Float?
  valorCombustivel  Float?
  impostoPercentual Float?
  impostoValor      Float?
  notaFiscal        String?
  despesas          String?
  serviceId         Int     @unique
  service           Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}